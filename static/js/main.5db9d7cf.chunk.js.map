{"version":3,"sources":["TitleContext.js","PrivacyPolicy.js","Success.js","ErrorPage.js","MainPage.js","App.js","index.js"],"names":["TitleContext","React","createContext","title","setTitle","withSetTitle","Wrapped","WithSetTitle","props","react_default","a","createElement","Consumer","_ref","Object","assign","displayName","concat","name","useEffect","react","href","location","_querystring$parse","querystring","parse","search","emailAddress","authorizedSender","tgGroup","tgAPIKey","messageEstablished","Paper","Typography","List","ListItem","Grid","container","justify","Box","width","err","color","useStyles","makeStyles","theme","root","button","marginRight","spacing","instructions","marginTop","marginBottom","mainPageTitle","classes","_useState","useState","_useState2","slicedToArray","botApiToken","setBotApiToken","_useState3","_useState4","shouldRetry","setShouldRetry","_useState5","_useState6","group","setGroup","_useState7","_useState8","fetching","setFetching","_useState9","_useState10","setAuthorizedSender","id","getUpdates","_ref2","asyncToGenerator","regenerator_default","mark","_callee","updates","wrap","_context","prev","next","fetch","tgAPI","then","d","json","sent","result","filter","upd","message","toString","forEach","chat","stop","apply","this","arguments","token","className","direction","style","TextField","fullWidth","onChange","event","m","target","value","match","placeholder","noWrap","paddingRight","CircularProgress","Fragment","Button","onClick","v","ev","size","variant","disabled","stringify","ForwardNavLink","forwardRef","ref","react_router_dom","innerRef","App","src_TitleContext","Provider","newTitle","isEqual","basename","process","AppBar","position","Toolbar","IconButton","to","component","Home_default","padding","item","xs","display","gridTemplateColumns","gridColumnEnd","react_router","path","exact","MainPage","Success","ErrorPage","PrivacyPolicy","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5db9d7cf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TitleContext = React.createContext({ title: null, setTitle: () => {} });\n\nexport default TitleContext;\n\nexport function withSetTitle(Wrapped) {\n  function WithSetTitle(props) {\n    return (\n      <TitleContext.Consumer>\n        {({ setTitle }) => <Wrapped setTitle={setTitle} {...props} />}\n      </TitleContext.Consumer>\n    );\n  }\n  WithSetTitle.displayName = `WithSetTitle(${Wrapped.displayName ||\n    Wrapped.name ||\n    \"Component\"})`;\n  return WithSetTitle;\n}\n","import React, { Fragment, useEffect } from \"react\";\nimport { withSetTitle } from \"./TitleContext\";\n\nfunction PrivacyPolicy({ setTitle }) {\n  useEffect(() => {\n    setTitle(\"Privacy Policy\");\n  });\n  return (\n    <Fragment>\n      <p>\n        It is Gmail to Telegram forwarder's policy to respect your privacy\n        regarding any information we may collect while operating our website.\n        This Privacy Policy applies to{\" \"}\n        <a href=\"https://mihaimartalogu.github.io/gmail-to-telegram\">\n          https://mihaimartalogu.github.io/gmail-to-telegram\n        </a>{\" \"}\n        (hereinafter, \"us\", \"we\", \"website\", or \"Gmail to Telegram forwarder\").\n        We respect your privacy and are committed to protecting personally\n        identifiable information you may provide us through the website.\n      </p>\n      <h2>Gathering of Personally-Identifying Information</h2>\n      We collect and store:\n      <ul>\n        <li>The email address of your Gmail account</li>\n        <li>\n          The Telegram information you provide or we are able to retrieve from\n          the Telegram API:\n          <ul>\n            <li>The Telegram bot's API key</li>\n            <li>Group ID</li>\n          </ul>\n        </li>\n        <li>Authorized sender email address (optional)</li>\n      </ul>\n      <p>\n        All of the elements not explicitly marked optional are necessary for\n        providing the functionality of the website.\n      </p>\n      <p>\n        The storage of the data is currently in Google datacenters in the US.\n      </p>\n      <h2>Security</h2>\n      <p>\n        The security of your Personal Information is important to us, but\n        remember that no method of transmission over the Internet, or method of\n        electronic storage is 100% secure. While we strive to use commercially\n        acceptable means to protect your Personal Information, we cannot\n        guarantee its absolute security.\n      </p>\n      <h2>Privacy Policy Changes</h2>\n      <p>\n        Although most changes are likely to be minor, Gmail to Telegram\n        forwarder may change its Privacy Policy from time to time, and at Gmail\n        to Telegram forwarder's sole discretion. We encourage visitors to\n        frequently check this page for any changes to the Privacy Policy. Your\n        continued use of the website after any change in this Privacy Policy\n        will constitute your acceptance of such change.\n      </p>\n      <h2>Contact Information</h2>\n      <p>\n        If you have any questions about this Privacy Policy, please contact us\n        via{\" \"}\n        <a href=\"mailto:gmail-to-telegram-forwarder@googlegroups.com\">email</a>.\n      </p>\n    </Fragment>\n  );\n}\n\nexport default withSetTitle(PrivacyPolicy);\n","import React, { useEffect } from \"react\";\nimport {\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  Box,\n  Grid\n} from \"@material-ui/core\";\n\nimport querystring from \"query-string\";\n\nimport { withSetTitle } from \"./TitleContext\";\n\nfunction Success({ location, setTitle }) {\n  useEffect(() => {\n    setTitle(\"Great success!\");\n  }, [setTitle]);\n  const {\n    emailAddress,\n    authorizedSender,\n    tgGroup,\n    tgAPIKey,\n    messageEstablished\n  } = querystring.parse(location.search);\n  return (\n    <Paper>\n      <Typography>\n        You have successfully set up the forwarding. Here's a summary of the\n        configuration:\n      </Typography>\n      <List>\n        <ListItem>Your Gmail address: {emailAddress}</ListItem>\n        <ListItem>Sender authorized: {authorizedSender || \"all\"}</ListItem>\n        <ListItem>Telegram group ID: {tgGroup}</ListItem>\n        <ListItem>Telegram bot API key: {tgAPIKey}</ListItem>\n      </List>\n      <Typography>The following message has been sent to the group:</Typography>\n      <Grid container justify=\"center\">\n        <Box width=\"80%\">\n          <Paper>\n            <Typography>{messageEstablished}</Typography>\n          </Paper>\n        </Box>\n      </Grid>\n    </Paper>\n  );\n}\nexport default withSetTitle(Success);\n","import React, { useEffect } from \"react\";\nimport { Paper, Typography, Box, Grid } from \"@material-ui/core\";\n\nimport querystring from \"query-string\";\n\nimport { withSetTitle } from \"./TitleContext\";\n\nfunction ErrorPage({ location, setTitle }) {\n  useEffect(() => {\n    setTitle(\"Epic failure!\");\n  }, [setTitle]);\n  const { err } = querystring.parse(location.search);\n  return (\n    <Paper>\n      <Typography color=\"error\">\n        Unfortunately the tool encountered an error. You might have more details\n        in the message below:\n      </Typography>\n      <Grid container justify=\"center\">\n        <Box width=\"80%\">\n          <Paper>\n            <Typography>{err}</Typography>\n          </Paper>\n        </Box>\n      </Grid>\n    </Paper>\n  );\n}\nexport default withSetTitle(ErrorPage);\n","import React, { useState, Fragment, useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TitleContext, { withSetTitle } from \"./TitleContext\";\nimport {\n  Typography,\n  Grid,\n  TextField,\n  CircularProgress,\n  Button,\n  Link\n} from \"@material-ui/core\";\nimport querystring from \"query-string\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nexport const mainPageTitle = \"Gmail to Telegram forwarder\";\n\nfunction MainPage({ setTitle }) {\n  const classes = useStyles();\n  const [botApiToken, setBotApiToken] = useState({});\n  const [shouldRetry, setShouldRetry] = useState(0);\n  const [group, setGroup] = useState({});\n  const [fetching, setFetching] = useState(false);\n  const [authorizedSender, setAuthorizedSender] = useState(\"\");\n\n  useEffect(() => {\n    setTitle(mainPageTitle);\n  }, [setTitle]);\n\n  useEffect(() => {\n    if (botApiToken.id) {\n      const tgAPI = `https://api.telegram.org/bot${botApiToken.id}:${\n        botApiToken.token\n      }`;\n      async function getUpdates() {\n        setFetching(true);\n        const updates = await fetch(`${tgAPI}/getUpdates`).then(d => d.json());\n        updates.result\n          ? updates.result\n              .filter(\n                upd =>\n                  !!(\n                    upd.message[\"new_chat_member\"] &&\n                    upd.message[\"new_chat_member\"].id.toString() ===\n                      botApiToken.id\n                  )\n              )\n              .forEach(upd => setGroup(upd.message.chat))\n          : setGroup({});\n        setFetching(false);\n      }\n      getUpdates();\n    }\n  }, [botApiToken, shouldRetry]);\n\n  return (\n    <Fragment>\n      <div className={classes.root}>\n        <Grid container direction=\"column\">\n          <Typography\n            className={classes.instructions}\n            style={{ marginTop: \"5em\" }}\n          >\n            You will need a Telegram bot that you own. You can use{\" \"}\n            <a href=\"https://telegram.me/BotFather\">BotFather</a> to set one up,\n            you just need to add @BotFather to your contacts, then tell him\n            \"/newbot\". Once you have your bot, enter its HTTP API token below.\n            BotFather displays the token when it creates your bot.\n          </Typography>\n\n          <TextField\n            fullWidth\n            onChange={event => {\n              const m = event.target.value.match(/^(\\d{9}):(.{35})$/);\n              if (m) {\n                setBotApiToken({ id: m[1], token: m[2] });\n              }\n            }}\n            placeholder=\"Bot HTTP API token\"\n          />\n\n          {botApiToken.id && (\n            <Grid container justify=\"center\">\n              <Typography noWrap style={{ paddingRight: \"1em\" }}>\n                Detected group:{\" \"}\n              </Typography>\n              {fetching ? (\n                <CircularProgress />\n              ) : group.title ? (\n                <Typography noWrap color=\"primary\">\n                  {group.title}\n                </Typography>\n              ) : (\n                <Typography color=\"error\" noWrap>\n                  Unknown\n                </Typography>\n              )}\n              {!fetching && !group.title && (\n                <>\n                  <Typography color=\"error\" className={classes.instructions}>\n                    The tool needs to know the group where you want your\n                    messages sent. In order to have this info, you will need to\n                    add your bot to that group, or if it's already added, remove\n                    and add it again. Click Retry to try again.\n                  </Typography>\n                  <Button onClick={() => setShouldRetry(v => v + 1)}>\n                    Retry\n                  </Button>\n                </>\n              )}\n            </Grid>\n          )}\n\n          <Typography className={classes.instructions}>\n            You can restrict the forwarding to a single sender by typing the\n            email address below. If left empty, all mail will get forwarded.\n          </Typography>\n          <TextField\n            fullWidth\n            placeholder=\"Filter by sender\"\n            value={authorizedSender}\n            onChange={ev => setAuthorizedSender(ev.target.value)}\n          />\n        </Grid>\n        <Grid container justify=\"center\">\n          <Button\n            size=\"large\"\n            variant=\"contained\"\n            disabled={!group.id}\n            color=\"primary\"\n            href={`https://us-central1-gmail-to-telegram-forwarder.cloudfunctions.net/oauth2init?${querystring.stringify(\n              {\n                tgGroup: group.id,\n                tgAPIKey: `${botApiToken.id}:${botApiToken.token}`,\n                authorizedSender\n              }\n            )}`}\n            style={{ marginTop: \"5em\" }}\n          >\n            Authorize Gmail account\n          </Button>\n        </Grid>\n      </div>\n    </Fragment>\n  );\n}\nexport default withSetTitle(MainPage);\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport \"./App.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Input,\n  CircularProgress,\n  Link as MuiLink,\n  Grid,\n  Box,\n  TextField,\n  AppBar,\n  Toolbar,\n  IconButton\n} from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport isEqual from \"lodash/isEqual\";\n\nimport querystring from \"query-string\";\n// using ES6 modules\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link as NavLink\n} from \"react-router-dom\";\n\nimport PrivacyPolicy from \"./PrivacyPolicy\";\nimport Success from \"./Success\";\nimport ErrorPage from \"./ErrorPage\";\nimport TitleContext from \"./TitleContext\";\nimport MainPage, { mainPageTitle } from \"./MainPage\";\n\nconst ForwardNavLink = React.forwardRef((props, ref) => (\n  <NavLink {...props} innerRef={ref} />\n));\n\nfunction App() {\n  const [title, setTitle] = useState(mainPageTitle);\n  return (\n    <TitleContext.Provider\n      value={{\n        title,\n        setTitle: newTitle => isEqual(title, newTitle) || setTitle(newTitle)\n      }}\n    >\n      <Box>\n        <Router basename={process.env.PUBLIC_URL}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Grid container>\n                <IconButton href=\"/\" to=\"/\" component={ForwardNavLink}>\n                  <HomeIcon />\n                </IconButton>\n                <TitleContext.Consumer>\n                  {({ title }) => (\n                    <Typography\n                      variant=\"h5\"\n                      noWrap\n                      style={{ padding: \"6px 16px\" }}\n                    >\n                      {title}\n                    </Typography>\n                  )}\n                </TitleContext.Consumer>\n\n                <Grid item xs />\n                <Button\n                  href=\"/privacy\"\n                  color=\"inherit\"\n                  to=\"/privacy\"\n                  component={ForwardNavLink}\n                >\n                  Privacy Policy\n                </Button>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n          <Box\n            display=\"grid\"\n            style={{\n              gridTemplateColumns: \"minmax(0, 1fr) 600px minmax(0, 1fr)\"\n            }}\n          >\n            <Box style={{ gridColumnEnd: \"span 1\" }} />\n            <Box style={{ gridColumnEnd: \"span 1\" }}>\n              <Route path=\"/\" exact component={MainPage} />\n              <Route path=\"/success\" exact component={Success} />\n              <Route path=\"/error\" exact component={ErrorPage} />\n              <Route path=\"/privacy\" exact component={PrivacyPolicy} />\n            </Box>\n            <Box style={{ gridColumnEnd: \"span 1\" }} />\n          </Box>\n        </Router>\n      </Box>\n    </TitleContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}